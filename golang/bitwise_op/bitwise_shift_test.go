package bitwise_op

import (
	"fmt"
)

func ExampleName_bitwise_shift_unsigned() {
	var u81 uint8 = 12
	var u82 uint8 = 35

	for i := range 9 {
		fmt.Printf("%s >> %d = %s(%d)\n", integerBits(u81), i, integerBits(u81>>i), u81>>i)
	}
	fmt.Println()
	for i := range 9 {
		fmt.Printf("%s << %d = %s(%d)\n", integerBits(u82), i, integerBits(u82<<i), u82<<i)
	}

	// Output:
	// 1100 >> 0 = 1100(12)
	// 1100 >> 1 = 110(6)
	// 1100 >> 2 = 11(3)
	// 1100 >> 3 = 1(1)
	// 1100 >> 4 = 0(0)
	// 1100 >> 5 = 0(0)
	// 1100 >> 6 = 0(0)
	// 1100 >> 7 = 0(0)
	// 1100 >> 8 = 0(0)
	//
	// 100011 << 0 = 100011(35)
	// 100011 << 1 = 1000110(70)
	// 100011 << 2 = 10001100(140)
	// 100011 << 3 = 11000(24)
	// 100011 << 4 = 110000(48)
	// 100011 << 5 = 1100000(96)
	// 100011 << 6 = 11000000(192)
	// 100011 << 7 = 10000000(128)
	// 100011 << 8 = 0(0)
}

func ExampleName_bitwise_shift_signed() {
	var i81 int8 = -35
	var i82 int8 = 35

	for i := range 9 {
		fmt.Printf("%s >> %d = %s(%d)\n", integerBits(i81), i, integerBits(i81>>i), i81>>i)
	}
	fmt.Println()
	for i := range 9 {
		fmt.Printf("%s << %d = %s(%d)\n", integerBits(i81), i, integerBits(i81<<i), i81<<i)
	}
	fmt.Println()
	for i := range 9 {
		fmt.Printf("%s >> %d = %s(%d)\n", integerBits(i82), i, integerBits(i82>>i), i82>>i)
	}
	fmt.Println()
	for i := range 9 {
		fmt.Printf("%s << %d = %s(%d)\n", integerBits(i82), i, integerBits(i82<<i), i82<<i)
	}

	// Output:
	// 11011101 >> 0 = 11011101(-35)
	// 11011101 >> 1 = 11101110(-18)
	// 11011101 >> 2 = 11110111(-9)
	// 11011101 >> 3 = 11111011(-5)
	// 11011101 >> 4 = 11111101(-3)
	// 11011101 >> 5 = 11111110(-2)
	// 11011101 >> 6 = 11111111(-1)
	// 11011101 >> 7 = 11111111(-1)
	// 11011101 >> 8 = 11111111(-1)
	//
	// 11011101 << 0 = 11011101(-35)
	// 11011101 << 1 = 10111010(-70)
	// 11011101 << 2 = 1110100(116)
	// 11011101 << 3 = 11101000(-24)
	// 11011101 << 4 = 11010000(-48)
	// 11011101 << 5 = 10100000(-96)
	// 11011101 << 6 = 1000000(64)
	// 11011101 << 7 = 10000000(-128)
	// 11011101 << 8 = 0(0)
	//
	// 100011 >> 0 = 100011(35)
	// 100011 >> 1 = 10001(17)
	// 100011 >> 2 = 1000(8)
	// 100011 >> 3 = 100(4)
	// 100011 >> 4 = 10(2)
	// 100011 >> 5 = 1(1)
	// 100011 >> 6 = 0(0)
	// 100011 >> 7 = 0(0)
	// 100011 >> 8 = 0(0)
	//
	// 100011 << 0 = 100011(35)
	// 100011 << 1 = 1000110(70)
	// 100011 << 2 = 10001100(-116)
	// 100011 << 3 = 11000(24)
	// 100011 << 4 = 110000(48)
	// 100011 << 5 = 1100000(96)
	// 100011 << 6 = 11000000(-64)
	// 100011 << 7 = 10000000(-128)
	// 100011 << 8 = 0(0)
}
